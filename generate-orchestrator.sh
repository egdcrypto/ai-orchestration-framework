#!/bin/bash
# Generate orchestration script for any feature domain
# Usage: ./generate-orchestrator.sh <domain>

DOMAIN=$1
if [ -z "$DOMAIN" ]; then
    echo "Usage: $0 <domain>"
    echo "Available domains:"
    if [ -d "../src/test/resources/features" ]; then
        find ../src/test/resources/features -type d -mindepth 1 -maxdepth 1 | xargs -n1 basename | sort
    else
        echo "Please ensure your project has a src/test/resources/features directory"
    fi
    exit 1
fi

OUTPUT_FILE="./orchestrate-${DOMAIN}.sh"

# Set PROJECT_ROOT if not already set
if [ -z "$PROJECT_ROOT" ]; then
    PROJECT_ROOT="$(cd .. && pwd)"
fi

FEATURE_DIR="src/test/resources/features/${DOMAIN}"

# Check if domain exists
if [ ! -d "$PROJECT_ROOT/$FEATURE_DIR" ]; then
    echo "❌ Domain not found: $DOMAIN"
    echo "Available domains:"
    if [ -d "$PROJECT_ROOT/src/test/resources/features" ]; then
        find "$PROJECT_ROOT/src/test/resources/features" -type d -mindepth 1 -maxdepth 1 | xargs -n1 basename | sort
    fi
    exit 1
fi

echo "🔧 Generating orchestration script for domain: $DOMAIN"

# Count features
FEATURE_COUNT=$(ls "$PROJECT_ROOT"/$FEATURE_DIR/*.feature 2>/dev/null | wc -l)
echo "📊 Found $FEATURE_COUNT feature files"

# Determine team size based on feature count
if [ $FEATURE_COUNT -le 3 ]; then
    TEAM_SIZE=1
    TEAM_DESC="Single engineer handling all aspects"
elif [ $FEATURE_COUNT -le 6 ]; then
    TEAM_SIZE=2
    TEAM_DESC="API/Domain engineer + Testing engineer"
else
    TEAM_SIZE=3
    TEAM_DESC="Full team: API + Domain + Testing"
fi

echo "👥 Recommended team size: $TEAM_SIZE ($TEAM_DESC)"

# Generate the orchestration script
cat > "$OUTPUT_FILE" << EOF
#!/bin/bash
# Project: ${DOMAIN} Features Orchestration
# Auto-generated by generate-orchestrator.sh
# Team size: $TEAM_SIZE engineers

set -e

DOMAIN="${DOMAIN}"
SESSION_NAME="\${DOMAIN}-dev"
PROJECT_ROOT="\${PROJECT_ROOT:-\$(pwd)/..}"
FEATURE_DIR="\$PROJECT_ROOT/src/test/resources/features/\${DOMAIN}"

echo "🚀 Starting orchestration for \${DOMAIN} domain"
echo "📁 Project root: \$PROJECT_ROOT"
echo "👥 Team size: $TEAM_SIZE engineers"

# Check if session already exists
if tmux has-session -t \$SESSION_NAME 2>/dev/null; then
    echo "⚠️  Session \$SESSION_NAME already exists"
    read -p "Kill existing session? (y/n) " -n 1 -r
    echo
    if [[ \$REPLY =~ ^[Yy]$ ]]; then
        tmux kill-session -t \$SESSION_NAME
    else
        echo "Attaching to existing session..."
        tmux attach -t \$SESSION_NAME
        exit 0
    fi
fi

# Create new session
tmux new-session -d -s \$SESSION_NAME -n orchestrator

# Setup orchestrator window
tmux send-keys -t \$SESSION_NAME:0 "cd \$PROJECT_ROOT" C-m
tmux send-keys -t \$SESSION_NAME:0 "echo '🎯 Orchestrator Ready - Monitoring \${DOMAIN} implementation'" C-m

# Create engineer windows based on team size
if [ $TEAM_SIZE -ge 1 ]; then
    tmux new-window -t \$SESSION_NAME:1 -n "engineer1"
    tmux send-keys -t \$SESSION_NAME:1 "cd \$PROJECT_ROOT" C-m
    tmux send-keys -t \$SESSION_NAME:1 "echo 'Engineer 1: Domain Layer Specialist'" C-m
    tmux send-keys -t \$SESSION_NAME:1 "# Review engineer1-briefing.md for your tasks" C-m
fi

if [ $TEAM_SIZE -ge 2 ]; then
    tmux new-window -t \$SESSION_NAME:2 -n "engineer2"
    tmux send-keys -t \$SESSION_NAME:2 "cd \$PROJECT_ROOT" C-m
    tmux send-keys -t \$SESSION_NAME:2 "echo 'Engineer 2: Application Layer Specialist'" C-m
    tmux send-keys -t \$SESSION_NAME:2 "# Review engineer2-briefing.md for your tasks" C-m
fi

if [ $TEAM_SIZE -ge 3 ]; then
    tmux new-window -t \$SESSION_NAME:3 -n "engineer3"
    tmux send-keys -t \$SESSION_NAME:3 "cd \$PROJECT_ROOT" C-m
    tmux send-keys -t \$SESSION_NAME:3 "echo 'Engineer 3: Infrastructure Layer Specialist'" C-m
    tmux send-keys -t \$SESSION_NAME:3 "# Review engineer3-briefing.md for your tasks" C-m
fi

# Create progress tracking
mkdir -p "\$FEATURE_DIR/implementation"
cat > "\$FEATURE_DIR/implementation/IMPLEMENTATION_PROGRESS.md" << PROGRESS
# \${DOMAIN} Implementation Progress

## Team Assignment
- Engineers: $TEAM_SIZE
- Session: \$SESSION_NAME
- Started: \$(date)

## Features to Implement
EOF

# List features
for feature in \$FEATURE_DIR/*.feature; do
    if [ -f "\$feature" ]; then
        basename="\$(basename \$feature)"
        echo "- [ ] \$basename" >> "\$FEATURE_DIR/implementation/IMPLEMENTATION_PROGRESS.md"
    fi
done

echo "" >> "\$FEATURE_DIR/implementation/IMPLEMENTATION_PROGRESS.md"
echo "## Progress Log" >> "\$FEATURE_DIR/implementation/IMPLEMENTATION_PROGRESS.md"
echo "Track implementation progress here..." >> "\$FEATURE_DIR/implementation/IMPLEMENTATION_PROGRESS.md"

echo "PROGRESS" >> "\$FEATURE_DIR/implementation/IMPLEMENTATION_PROGRESS.md"

# Attach to session
echo "✅ Orchestration setup complete!"
echo ""
echo "📋 Next steps:"
echo "1. Review the feature files in \$FEATURE_DIR"
echo "2. Check engineer briefings for role assignments"
echo "3. Start implementation following the architecture guide"
echo ""
echo "Attaching to tmux session..."
sleep 2
tmux attach -t \$SESSION_NAME
EOF

# Make the generated script executable
chmod +x "$OUTPUT_FILE"

echo "✅ Generated: $OUTPUT_FILE"
echo ""
echo "To start orchestration, run:"
echo "  ./$OUTPUT_FILE"
echo ""
echo "Team assignments:"
if [ $TEAM_SIZE -ge 1 ]; then
    echo "  Engineer 1: Domain Layer (entities, business logic)"
fi
if [ $TEAM_SIZE -ge 2 ]; then
    echo "  Engineer 2: Application Layer (services, use cases)"
fi
if [ $TEAM_SIZE -ge 3 ]; then
    echo "  Engineer 3: Infrastructure Layer (REST, persistence)"
fi